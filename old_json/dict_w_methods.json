{
	"category":"documentation",
	"topic":"dictionary",
	
	"text":{
		"clear":{
			"signature":"d.clear",
			"description":"Remove all items from the dict."
		},
		"copy":{
			"signature":"d.copy",
			"description":"Copy the dict to make a new dict. This is a shallow copy. All objects in the new dict are references to the same objects as the original dict."
		},
		"setdefault":{
			"signature":"d.setdefault ( key , [ default ])",
			"description":"Similar to d. get( key ) and d [ key ] - get the item with the given key. However, this sets a default value to the supplied object."
		},
		"update":{
			"signature":"d.update ( new , [ default ])",
			"description":"Merge values from the new dict into the original dict, adding or replacing as needed. It is equivalent to the following Python statement. for k in new.keys(): d[k]= new[k]"
		},
		"pop":{
			"signature":"d.pop ( key , [ value ])",
			"description":"Remove the given key from the dict, returning the associated value. If the key does not exist, return the optional value provided in the pop call."
		},
		"get":{
			"signature":"d.get ( key , [ default ])",
			"description":"Get the item with the given key , similar to d [ key ]. If the key is not present, supply default instead."
		},
		"has_key":{
			"signature":"d.has_key ( key )",
			"description":"If there is an entry in the dict with the given key , return True, otherwise return False."
		},
		"items":{
			"signature":"d.items()",
			"description":"Return all of the items in the dict as a sequence of (key,value) tuples. Note that these are returned in no particular order."
		},
		"keys":{
			"signature":"d.keys()",
			"description":"Return all of the keys in the dict as a sequence of keys. Note that these are returned in no particular order."
		},
		"values":{
			"signature":"d.values()",
			"description":"Return all the values from the dict as a sequence. Note that these are returned in no particular order"
		}
	}
}